<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Daily Code Change Tracker</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jsdiff/5.1.0/diff.min.js"></script>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            margin: 0;
            background-color: #f4f7f9;
            color: #333;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        header {
            background-color: #2c3e50;
            color: white;
            padding: 1rem 2rem;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .container {
            display: flex;
            flex-grow: 1;
            overflow: hidden; /* Prevents container from overflowing */
        }

        .left-panel {
            width: 40%;
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            border-right: 1px solid #ccc;
        }

        .left-panel h2 {
            margin-top: 0;
            color: #34495e;
            border-bottom: 2px solid #3498db;
            padding-bottom: 0.5rem;
        }

        #codeInput {
            flex-grow: 1;
            width: 100%;
            padding: 10px;
            font-family: 'Courier New', Courier, monospace;
            font-size: 14px;
            border: 1px solid #ccc;
            border-radius: 4px;
            resize: none;
            box-sizing: border-box;
        }

        #addVersionBtn {
            margin-top: 1rem;
            padding: 12px 20px;
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            transition: background-color 0.2s;
        }

        #addVersionBtn:hover {
            background-color: #2980b9;
        }
        
        #instructions {
            background-color: #eaf2f8;
            border-left: 4px solid #3498db;
            padding: 10px;
            margin-bottom: 1rem;
            font-size: 0.9em;
        }

        .right-panel {
            width: 60%;
            display: flex;
            flex-direction: column;
            background-color: #ffffff;
        }

        #tabsContainer {
            display: flex;
            flex-wrap: wrap;
            padding: 0 1rem;
            border-bottom: 1px solid #ccc;
            background-color: #ecf0f1;
        }

        .tab {
            padding: 10px 15px;
            cursor: pointer;
            border: 1px solid transparent;
            border-bottom: none;
            margin-top: 5px;
            margin-right: 5px;
            border-radius: 5px 5px 0 0;
            background-color: #bdc3c7;
            color: #2c3e50;
        }

        .tab.active {
            background-color: #ffffff;
            border-color: #ccc;
            border-bottom: 1px solid #ffffff;
            font-weight: bold;
        }

        #diffContainer {
            flex-grow: 1;
            overflow: auto; /* Important for scrolling the code */
            padding: 1rem;
            background-color: #fff;
        }

        #diffContainer pre {
            margin: 0;
            font-family: 'Courier New', Courier, monospace;
            font-size: 14px;
            white-space: pre-wrap; /* Allows wrapping long lines */
            word-wrap: break-word;
        }
        
        .line-added {
            background-color: #e6ffed;
            display: block;
        }
        .line-removed {
            background-color: #ffeef0;
            text-decoration: line-through;
            display: block;
        }
        .line-context {
            color: #666;
            display: block;
        }
        
        /* Adding + and - signs */
        .line-added::before {
            content: '+ ';
            color: #28a745;
            font-weight: bold;
        }
         .line-removed::before {
            content: '- ';
            color: #dc3545;
            font-weight: bold;
        }

    </style>
</head>
<body>

    <header>
        <h1>Daily Code Change Tracker</h1>
    </header>

    <div class="container">
        <div class="left-panel">
            <h2>Editor</h2>
             <div id="instructions">
                <strong>1. Start:</strong> Paste your initial code below and click "Add".<br>
                <strong>2. Work:</strong> Edit your code in your usual editor.<br>
                <strong>3. Track:</strong> Paste the new version below and click "Add" to see the changes.
            </div>
            <textarea id="codeInput" placeholder="Paste your code here..."></textarea>
            <button id="addVersionBtn">Add as New Version</button>
        </div>
        <div class="right-panel">
            <div id="tabsContainer"></div>
            <div id="diffContainer">
                <p>Changes will be displayed here. Add your first version to begin.</p>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const codeInput = document.getElementById('codeInput');
            const addVersionBtn = document.getElementById('addVersionBtn');
            const tabsContainer = document.getElementById('tabsContainer');
            const diffContainer = document.getElementById('diffContainer');

            let codeVersions = [];
            let activeTabIndex = -1;

            addVersionBtn.addEventListener('click', () => {
                const newCode = codeInput.value;
                if (newCode.trim() === '') {
                    alert('Code input cannot be empty.');
                    return;
                }
                codeVersions.push(newCode);
                codeInput.value = ''; // Clear the input for the next paste
                activeTabIndex = codeVersions.length - 1;
                renderUI();
            });

            function renderUI() {
                renderTabs();
                renderDiff(activeTabIndex);
            }

            function renderTabs() {
                tabsContainer.innerHTML = '';
                codeVersions.forEach((_, index) => {
                    const tab = document.createElement('div');
                    tab.classList.add('tab');
                    if (index === 0) {
                        tab.textContent = `Version 1 (Base)`;
                    } else {
                        tab.textContent = `Version ${index + 1} vs ${index}`;
                    }
                    
                    if (index === activeTabIndex) {
                        tab.classList.add('active');
                    }

                    tab.addEventListener('click', () => {
                        activeTabIndex = index;
                        renderUI();
                    });
                    
                    tabsContainer.appendChild(tab);
                });
            }

            function renderDiff(index) {
                diffContainer.innerHTML = '';
                const pre = document.createElement('pre');

                if (index < 0 || codeVersions.length === 0) {
                    diffContainer.innerHTML = '<p>Changes will be displayed here. Add your first version to begin.</p>';
                    return;
                }

                const newCode = codeVersions[index];

                // If it's the first version, just show the code
                if (index === 0) {
                    pre.textContent = newCode;
                    diffContainer.appendChild(pre);
                    return;
                }

                // Otherwise, compare with the previous version
                const oldCode = codeVersions[index - 1];
                const diff = Diff.diffLines(oldCode, newCode);

                diff.forEach(part => {
                    const span = document.createElement('span');
                    
                    // Split the value by lines to apply class per line
                    const lines = part.value.split('\n');
                    
                    // The last element from split is often empty if the string ends with a newline, so we handle it.
                    if (lines[lines.length - 1] === '') {
                        lines.pop();
                    }
                    
                    let lineContent = lines.map(line => {
                         const lineSpan = document.createElement('span');
                         if(part.added) {
                            lineSpan.className = 'line-added';
                         } else if (part.removed) {
                            lineSpan.className = 'line-removed';
                         } else {
                            lineSpan.className = 'line-context'; // Unchanged lines
                         }
                         lineSpan.appendChild(document.createTextNode(line));
                         return lineSpan.outerHTML;
                    }).join('\n');
                    
                    // We use innerHTML here because we constructed HTML strings above
                    // This is generally safe as the content is user-provided code, not arbitrary HTML
                    span.innerHTML = lineContent;
                    pre.appendChild(span);

                    // Add a newline if the part ended with one, preserving structure
                     if(part.value.endsWith('\n')) {
                        pre.appendChild(document.createTextNode('\n'));
                    }
                });

                diffContainer.appendChild(pre);
            }
        });
    </script>
</body>
</html>
